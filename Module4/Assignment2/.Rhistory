knitr::opts_chunk$set(echo = TRUE)
options(tidyverse.quiet = TRUE)
library(tidyverse)
blood = read_csv("Blood.csv")
View(blood)
iinstall.packages("caret")
install.packages("caret")
install.packages("rpart")
install.packages("RColorBrewer")
library(tidyverse)
library(caret)
library(rpart)
library(rattle)
install.packages("rattle")
library(rattle)
library(RColorBrewer)
parole = read_csv("parole.csv")
head(parole)
parole = parole %>% mutate(male = as_factor(as.character(male))) %>%
mutate(male = fct_recode(male,
"male" = "1",
"female" = "0"))
parole = parole %>% mutate(race = as_factor(as.character(race))) %>%
mutate(race = fct_recode(race,
"white" = "1",
"other" = "2"))
parole = parole %>% mutate(state = as_factor(as.character(state))) %>%
mutate(state = fct_recode(state,
"Other" = "1",
"Kentucky" = "2",
"Lousiana" = "3",
"Virginia" = "4"))
parole = parole %>% mutate(crime = as_factor(as.character(crime))) %>%
mutate(crime = fct_recode(crime,
"Other" = "1",
"larceny" = "2",
"drug-related" = "3",
"driving-related" = "4"))
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
set.seed(12345)
train.rows = createDataPartition(y= parole$violator, p=0.7, list= FALSE)
train = parole[train.rows,]
test = parole[-train.rows,]
head(train)
parole = parole %>% mutate(male = as_factor(as.character(male))) %>%
mutate(male = fct_recode(male,
"male" = "1",
"female" = "0"))
parole = parole %>% mutate(race = as_factor(as.character(race))) %>%
mutate(race = fct_recode(race,
"white" = "1",
"other" = "2"))
parole = parole %>% mutate(state = as_factor(as.character(state))) %>%
mutate(state = fct_recode(state,
"Other" = "1",
"Kentucky" = "2",
"Lousiana" = "3",
"Virginia" = "4"))
parole = parole %>% mutate(crime = as_factor(as.character(crime))) %>%
mutate(crime = fct_recode(crime,
"Other" = "1",
"larceny" = "2",
"drug-related" = "3",
"driving-related" = "4"))
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
parole = parole %>% mutate(male = as_factor(as.character(male))) %>%
mutate(male = fct_recode(male,
"male" = "1",
"female" = "0"))
parole = parole %>% mutate(race = as_factor(as.character(race))) %>%
mutate(race = fct_recode(race,
"white" = "1",
"other" = "2"))
parole = parole %>% mutate(state = as_factor(as.character(state))) %>%
mutate(state = fct_recode(state,
"Other" = "1",
"Kentucky" = "2",
"Lousiana" = "3",
"Virginia" = "4"))
parole = parole %>% mutate(crime = as_factor(as.character(crime))) %>%
mutate(crime = fct_recode(crime,
"Other" = "1",
"larceny" = "2",
"drug-related" = "3",
"driving-related" = "4"))
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
head(train)
head(parole)
parole = read_csv("parole.csv")
head(parole)
parole = parole %>% mutate(male = as_factor(as.character(male))) %>%
mutate(male = fct_recode(male,
"male" = "1",
"female" = "0"))
parole = parole %>% mutate(race = as_factor(as.character(race))) %>%
mutate(race = fct_recode(race,
"white" = "1",
"other" = "2"))
parole = parole %>% mutate(state = as_factor(as.character(state))) %>%
mutate(state = fct_recode(state,
"Other" = "1",
"Kentucky" = "2",
"Lousiana" = "3",
"Virginia" = "4"))
parole = parole %>% mutate(crime = as_factor(as.character(crime))) %>%
mutate(crime = fct_recode(crime,
"Other" = "1",
"larceny" = "2",
"drug-related" = "3",
"driving-related" = "4"))
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
head(parole)
tree1 = rpart(violator ~. train, method="class")
tree1 = rpart(violator ~., train, method="class")
fancyRpartPlot(tree1)
printcp(tree1)
plotcp(tree1)
printcp(tree1)
plotcp(tree1)
tree1 = rpart(violator ~., train, cp=0.010000, method="class")
tree2 = rpart(violator ~., train, cp=0.010000, method="class")
tree1 = rpart(violator ~., train, method="class")
View(tree2)
tree2 = rpart(violator ~., train, cp=0.01, method="class")
View(train)
View(train)
summary(train)
treepred = predict(tree1, train, type="class")
head(treepred)
confusionMatrix(treepred, train$violator, positive="Yes")
head(treepred)
confusionMatrix(treepred, train$violator, positive="Yes")
confusionMatrix(treepred,train$violator,positive = "Yes")
confusionMatrix(treepred,train$violator)
confusionMatrix(treepred,train$violator, positive="no-violation")
treepred_test = predict(tree1, test, type="class")
head(treepred_test)
confusionMatrix(treepred_test,train$violator, positive="no-violation")
treepred_test = predict(tree1, test, type="class")
head(treepred_test)
confusionMatrix(treepred_test, test$violator, positive="no-violation")
blood = read_csv("Blood.csv")
head(blood)
blood = blood %>% mutate(DonatedMarch = as_factor(as.character(DonatedMarch))) %>%
mutate(male = fct_recode(male,
"Yes" = "1",
"No" = "0"))
blood = blood %>% mutate(DonatedMarch = as_factor(as.character(DonatedMarch))) %>%
mutate(DonatedMarch = fct_recode(DonatedMarch,
"Yes" = "1",
"No" = "0"))
head(blood)
set.seed(1234)
train.rows2 = createDataPartition(y= blood$DonatedMarch, p=0.7, list= FALSE)
train2 = parole[train.rows2,]
test2 = parole[-train.rows2,]
blood_tree = rpart(DonatedMarch ~., train2, method="class")
head(train2)
train2 = blood[train.rows2,]
test2 = blood[-train.rows2,]
head(train2)
blood_tree = rpart(DonatedMarch ~., train2, method="class")
fancyRpartPlot(blood_tree)
printcp(blood_tree)
plotcp(blood_tree)
blood_tree2 = rpart(DonatedMarch ~., train, cp=0.01, method="class")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.01, method="class")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.01, method="class")
blood_treepred = predict(blood_tree2, train2, type="class")
head(blood_treepred)
confusionMatrix(blood_treepred,train2$DonatedMarch, positive="Yes")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.01, method="class")
blood_treepred = predict(blood_tree2, train2, type="class")
head(blood_treepred)
confusionMatrix(blood_treepred,train2$DonatedMarch, positive="Yes")
blood_treepred_test = predict(blood_tree2, test2, type="class")
head(blood_treepred_test)
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.034, method="class")
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
head(blood_treepred)
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_treepred_test = predict(blood_tree2, test2, type="class")
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
tree2 = rpart(violator ~., train, cp=0.03, method="class")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.016, method="class")
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_treepred_test = predict(blood_tree2, test2, type="class")
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.034, method="class")
blood_treepred_test = predict(blood_tree2, test2, type="class")
head(blood_treepred_test)
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.016, method="class")
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
head(blood_treepred)
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_treepred_test = predict(blood_tree2, test2, type="class")
head(blood_treepred_test)
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
blood_tree2_diff = prune(blood_tree, cp- blood_tree$cptable[which.min(blood_tree$cptable[,"xerror"]), "CP"])
blood_tree2_diff = prune(blood_tree, cp=blood_tree$cptable[which.min(blood_tree$cptable[,"xerror"]), "CP"])
blood_tree2 = prune(blood_tree, cp=blood_tree$cptable[which.min(blood_tree$cptable[,"xerror"]), "CP"])
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.016, method="class")
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_tree2 = prune(blood_tree, cp=blood_tree$cptable[which.min(blood_tree$cptable[,"xerror"]), "CP"])
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
blood_treepred_test = predict(blood_tree2, test2, type="class")
confusionMatrix(blood_treepred_test, test2$DonatedMarch, positive="Yes")
fancyRpartPlot(blood_tree2)
tree2 = rpart(violator ~., train, cp=.030303, method="class")
treepred = predict(tree1, train, type="class")
summary(train)
blood_tree2 = prune(blood_tree, cp=blood_tree$cptable[which.min(blood_tree$cptable[,"xerror"]), "CP"])
fancyRpartPlot(blood_tree2)
#blood_tree2 = rpart(DonatedMarch ~., train2, cp=0.016, method="class")
#Training Prediction and Confusion Matrix
blood_treepred = predict(blood_tree2, train2, type="class")
head(blood_treepred)
confusionMatrix(blood_treepred, train2$DonatedMarch, positive="Yes")
treepred = predict(tree1, train, type="class")
head(treepred)
confusionMatrix(treepred,train$violator, positive="violated-parole")
treepred_test = predict(tree1, test, type="class")
head(treepred_test)
confusionMatrix(treepred_test, test$violator, positive="violated-parole")
