install.packages("tidyverse")
install.packages("MASS")
install.packages("caret")
library(tidyverse)
library(MASS)
library(caret)
bike = read_csv("hour.csv")
bike = bike %>% mutate(season = as_factor(as.character(season))) %>%
mutate(season = fct_recode(season,
"Spring" = "1",
"Summer" = "2",
"Fall" = "3",
"Winter" = "4"))
#head(bike) #key reference to ensure code snippets below were successful
bike = bike %>% mutate(yr = as_factor(as.character(yr))) %>%
mutate(yr = fct_recode(yr))
bike = bike %>% mutate(mnth = as_factor(as.character(mnth))) %>%
mutate(mnth = fct_recode(mnth))
bike = bike %>% mutate(hr = as_factor(as.character(hr))) %>%
mutate(hr = fct_recode(hr))
bike = bike %>% mutate(workingday = as_factor(as.character(workingday))) %>%
mutate(workingday = fct_recode(workingday,
"NotWorkingDay" = "0",
"WorkingDay" = "1"))
bike = bike %>% mutate(weathersit = as_factor(as.character(weathersit))) %>%
mutate(weathersit = fct_recode(weathersit,
"NoPrecip" = "1",
"Misty" = "2",
"LightPrecip" = "3",
"HeavyPrecip" = "4"))
bike = bike %>% mutate(weekday = as_factor(as.character(weekday))) %>%
mutate(weekday = fct_recode(weekday,
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6",
"Sunday"= "0"))
head(bike)
set.seed(1234)
train.rows = createDataPartition(y= bike$count, p=0.7, list= FALSE)
train = bike[train.rows,]
test = bike[-train.rows,]
train_mod = lm(Count ~ season + mnth + hr + weekday + temp + weathersit, bike)
train_mod = lm(count ~ season + mnth + hr + weekday + temp + weathersit, bike)
summary(train_mod)
predict_train = predict(train_mod, newdata = train)
head(predict_train)
View(preict_train)
View(predict_train)
summary(predict_train)
hist(predict_train)
summary(predict_train)
hist(predict_train)
predict_test = predict(train_mod, newdata = test)
head(predict_test)
View(predict_test)
summary(predict_test)
hist(predict_test)
#sum of squared errors
SSE = sum((test$count - predict_test)^2)
SST = suM((test$count - mean(test$count))^2) #sum of squared residuals from a "naive" model
SST = sum((test$count - mean(test$count))^2) #sum of squared residuals from a "naive" model
r_squared = 1 - SSE/SST
r_squared
