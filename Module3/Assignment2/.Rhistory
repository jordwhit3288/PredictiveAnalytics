install.packages("tidyverse")
install.packages("MASS")
install.packages("caret")
install.packages("ROCR")
library(tidyverse)
library(MASS)
library(caret)
library(ROCR)
parole = read_csv("parole.csv")
head(parole)
head(parole)
parole = parole %>% mutate(male = as_factor(as.character(male))) %>%
mutate(male = fct_recode(male,
"male" = "1",
"female" = "0"))
head(parole)
parole = parole %>% mutate(race = as_factor(as.character(race))) %>%
mutate(race = fct_recode(race,
"white" = "1",
"other" = "2"))
head(parole)
parole = parole %>% mutate(state = as_factor(as.character(state))) %>%
mutate(state = fct_recode(state,
"Other" = "1",
"Kentucky" = "2",
"Lousiana" = "3",
"Virginia" = "4"))
head(parole)
parole = parole %>% mutate(crime = as_factor(as.character(crime))) %>%
mutate(crime = fct_recode(crime,
"Other" = "1",
"larceny" = "2",
"drug-related" = "3",
"driving-related" = "4"))
head(parole)
parole = parole %>% mutate(violator = as_factor(as.character(violator))) %>%
mutate(violator = fct_recode(violator,
"no-violation" = "0",
"violated-parole" = "1"))
head(parole)
set.seed(12345)
train.rows = createDataPartition(y= parole$violator, p=0.7, list= FALSE)
train = parole[train.rows,]
test = parole[-train.rows,]
ggplot(parole, aes(x=race)) + geom_histogram()
ggplot(parole, aes(x=time.served)) + geom_histogram()
ggplot(parole, aes(x=race, y=violator)) +
geom_boxplot()
ggplot(parole, aes(x=race, y=violator)) +
geom_bar(position="fill")
ggplot(parole, aes(x=male, y=violator)) +
geom_bar(position="fill")
ggplot(parole, aes(x=max.sentence, y=violator)) +
geom_bar(position="fill")
ggplot(train, aes(x=max.sentence, y=violator)) +
geom_bar(position="fill")
ggplot(train, aes(x=max.sentence, y=violator)) +
geom_histogram(position="fill")
ggplot(train, aes(race)) +
geom_histogram(position="fill")
ggplot(train, aes(x=race)) +
geom_histogram(position="fill")
ggplot(train, aes(x=race)) +
geom_histogram()
ggplot(train, aes(x=race)) +
geom_histogram()
ggplot(train, aes(x=race)) +geom_histogram()
ggplot(train, aes(x=violation, y=race)) + geom_boxplot()
View(train)
ggplot(train, aes(x=violator, y=race)) + geom_boxplot()
ggplot(train, aes(x=violator, y=train$time.served)) + geom_boxplot()
ggplot(train, aes(x=violator, y=time.served)) + geom_boxplot()
ggplot(train, aes(x=violator, y=age)) + geom_boxplot()
ggplot(train, aes(x=violator, fill=race)) + geom_bar()
ggplot(train, aes(x=violator, fill= drug-related)) + geom_bar()
ggplot(train, aes(x=violator, fill= crime)) + geom_bar()
ggplot(train, aes(x=violator, fill= male)) + geom_bar()
ggplot(train, aes(x=violator, y= male)) + geom_bar(position="fill")
test_mod = lm(violator ~ male, test)
summary(test_mod)
test_mod = lm(violator ~ male, test)
summary(test_mod)
test_mod = lm(violator ~ age, test)
summary(test_mod)
test_mod = lm(violator ~ male, test, family ="binomial")
summary(test_mod)
test_mod = glm(violator ~ male, test, family ="binomial")
summary(test_mod)
t = table(train$violator, train$state)
prop.table(t, margin=2)
t2 = table(train$violator, train$race)
prop.table(t2, margin=2)
allmod = glm(violator ~., train, family ="binomial")
summary(allmod)
emptymod = glm(violator~1, train, family="binomial")
summary(emptymod)
forwardmod = stepAIC(emptymod, direction = "forward", scope=list(upper=allmod, lower=emptymod), trace = TRUE)
summary(forwardmod)
backwardmod = stepAIC(allmod, direction = "backward" trace = TRUE)
backwardmod = stepAIC(allmod, direction = "backward", trace = TRUE)
summary(backwardmod) # AIC: 258.98
glm(formula = violator ~ race + state + multiple.offenses + crime, family = "binomial",
data = train)
glm(formula = violator ~ race + multiple.offenses + crime, family = "binomial",
data = train)
glm(formula = violator ~ race + multiple.offenses, family = "binomial",
data = train)
glm(formula = violator ~ race + multiple.offenses + male, family = "binomial",
data = train)
glm(formula = violator ~ age + multiple.offenses + state, family = "binomial",
data = train)
custom_mod = glm(formula = violator ~ age + multiple.offenses + state, family = "binomial",
data = train)
summary(custom_mod)
custom_mod = glm(formula = violator ~ time.served + multiple.offenses + state, family = "binomial",
data = train)
summary(custom_mod)
custom_mod = glm(formula = violator ~ time.served + multiple.offenses + state + race, family = "binomial",
data = train)
summary(custom_mod)
custom_mod = glm(formula = violator ~ multiple.offenses + state + race, family = "binomial",
data = train)
summary(custom_mod)
custom_mod = glm(formula = violator ~ time.served + multiple.offenses + state + race, family = "binomial",
data = train)
summary(custom_mod)
View(test)
predictions = predict(test, type="prob")[,2]
head(parole)
parolee1 = data.frame(state = "Lousiana", multiple.offenses = 1, race = "white" )
parolee2 = data.frame(state = "Kentucky", multiple.offenses = 0, race = "other" )
predict(forwardmod, parolee1, type="response")
predict(forwardmod, parolee2, type="response")
predictions = predict(train, type="response")
predictions = predict(train_mod, type="response")
predictions = predict(train, type="response")
predictions = predict(forwardmod, type="response")
predictions = predict(test_mod, type="response")
predictions = predict(forwardmod, type="response")
head(predictions)
ROCRpred = predictions(predictions, parole$violator)
ROCRpred = prediction(predictions, parole$violator)
ROCRpred = prediction(predictions, parole$violator)
ROCRpred = prediction(predictions, test$violator)
ROCRpred = prediction(predictions, train$violator)
ROCRpred
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at=(seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(rocrpef, colorize= TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(ROCRperff, colorize= TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(ROCRperf, colorize= TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
opt.cut = functions(pref,pred){
opt.cut = function(pref,pred){
cut.ind = mapply(FUN=function(x,y,p){
d = (x -0)^2 + y(-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(ROCRperf, ROCRpred))
opt.cut = function(perf,pred){
cut.ind = mapply(FUN=function(x,y,p){
d = (x -0)^2 + y(-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(ROCRperf, ROCRpred))
d = (x -0)^2 + (y-1)^2
opt.cut = function(perf,pred){
cut.ind = mapply(FUN=function(x,y,p){
d = (x -0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(ROCRperf, ROCRpred))
t1 = table(parole$violator, predictions > 0.2069629)
t1 = table(train$violator, predictions > 0.2069629)
t1
(t1[1,1]+t1[2+2]/nrow(train))
(t1[1,1]+t1[2,2]/nrow(train))
(t1[1,1]+t1[2,2]/nrow(train))
(t1[1,1]+t1[2,2]/nrow(train))
3
(t1[1,1]+t1[2,2]/nrow(train))
t1[1,1]
t1[2,2]
359 + 40
top = 359 + 40
bottom = nrow(train)
bottom
top/bottom
(t1[1,1]+t1[2,2]/nrow(train))
top/bottom
accuracy = top/bottom
accuracy
print(accuracy)
accuracy = function(){
x = t1[1,1]
y = t1[2,2]
top = x +y
bottom = nrow(train)
accuracy = top/bottom
print(accuracy)
}
accuracy()
accuracy()
t1 = table(train$violator, predictions > 0.5)
t1
t1 = table(train$violator, predictions > 0.5)
t1
accuracy()
accuracy()
t1 = table(train$violator, predictions > 0.35)
accuracy()
t1 = table(train$violator, predictions > 0.7)
accuracy()
t1 = table(train$violator, predictions > 0.7)
t1
accuracy()
t1 = table(train$violator, predictions > 0.65)
t1
t1 = table(train$violator, predictions > 0.55)
t1
accuracy()
t1 = table(train$violator, predictions > 0.25)
t1
accuracy()
t1 = table(train$violator, predictions > 0.65)
t1
t1 = table(train$violator, predictions > 0.35)
t1
accuracy()
t1 = table(train$violator, predictions > 0.1)
t1
accuracy()
top = x
naive_accuracy = function(){
x = t1[1]
top = x
bottom = nrow(train)
accuracy = top/bottom
print(accuracy)
}
t1 = table(train$violator, predictions > 1)
t1
naive_accuracy()
t1 = table(test$violator, predictions > 0.2069629)
ROCRpred = prediction(predictions, test$violator)
predict_test = predict(forwardmod, newdata = test)
t1 = table(test$violator, predict_test > .35)
accuracy()
t1 = table(test$violator, predict_test > .5)
accuracy()
t1 = table(test$violator, predict_test > 0.2069629)
accuracy()
t1 = table(test$violator, predict_test > 0.35)
accuracy()
predict_test
predict_test = predict(forwardmod, newdata = test, type= "response")
t1 = table(test$violator, predict_test > 0.35)
accuracy()
predict_test = predict(forwardmod, newdata = test, type= "response")
predict_test
t1 = table(test$violator, predict_test > 0.35)
accuracy()
train_accuracy = function(){
x = t1[1,1]
y = t1[2,2]
top = x +y
bottom = nrow(train)
accuracy = top/bottom
print(accuracy)
}
train_accuracy()
train_accuracy()
t1 = table(test$violator, predict_test > 0.35)
test_accuracy = function(){
x = t1[1,1]
y = t1[2,2]
top = x +y
bottom = nrow(test)
accuracy = top/bottom
print(accuracy)
}
t1 = table(test$violator, predict_test > 0.35)
test_accuracy = function(){
x = t1_test[1,1]
y = t1_test[2,2]
top = x +y
bottom = nrow(test)
accuracy = top/bottom
print(accuracy)
}
predict_test = predict(forwardmod, newdata = test, type= "response")
t1_test = table(test$violator, predict_test > 0.35)
test_accuracy()
violator~1
emptymod = glm(violator~1, train, family="binomial")
emptymod
train
